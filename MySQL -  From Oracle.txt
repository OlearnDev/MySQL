---------- MYSQL course from Oracle learning

-----   Chap.1
MySQL Enterprise Edition

	Advanced Features

		• High Availability
		• Authentication
		• Audit
		• Encryption and TDE
		• Firewall
		• Masking

	Management Tools

		• Monitoring
		• Backup
		• Development
		• Administration
		• Migration

	Support

		• Technical Support
		• Consultative Support
		• Oracle Certifications

Oracle Premier Support for MySQL

		• Largest MySQL engineering and support organization
		• Backed by the MySQL developers
		• World-class support, in 29 languages
		• Hot fixes and maintenance releases
		• 24 x 7 x 365
		• Unlimited incidents
		• Consultative support
		• Global scale and reach

MySQL integrates into the Oracle Environment

		Oracle Linux
		Oracle GoldenGate
		Oracle Secure Backup
		Oracle Fusion Middleware
		Oracle Enterprise Manager
		Oracle Database Firewall
		Oracle Audit Vault
		Oracle Key Vault

MySQL Websites

	• http://www.mysql.com includes:

		Product information
		Services (Training, Certification, and Support)
		White papers, webinars, and other resources
		MySQL Enterprise Edition (trial version)

	• http://dev.mysql.com includes:

	Developer Zone (Forums, MySQL Engineering Blogs, and more)
	Documentation
	Downloads

	• https://github.com/mysql

		Source code for MySQL Server and other MySQL products


Softs à installer pour labs :


[root@edvmr1p0~#ls/stage/MySQL-Server/     

	mysql-advanced-5.7.28-e17-x86_64.tar.gz
	mysql-commercial-8.0.18-el7-x86_64.tar.gz
	mysql-enterprise-server-8.0.18.tar
	
----------------- Installing MySQL from Downloaded Packages

Download and install packages using the following commands:

	On RPM-based systems, including Oracle Linux, Red Hat, Fedora, and CentOS:  

		rpm -ivh packagename.rpm
	
	On APT-based systems, including Ubuntu and Debian:

		dpkg -i packagename.deb
		
		•
For Debian installation : 

	DEB packages are available for APT Linux systems, either individually or bundled.
	
	$sudo dpkg -i mysql-{common,community-client,client, community-server,server} *.deb


For automatic installation : 

	On RPM-based systems, including Oracle Linux, Red Hat, Fedora, and CentOS, use yum install.

		yum install mysql-community-server
		yum install mysql-workbench

	On APT-based systems, including Ubuntu and Debian, use apt-get install:

		apt-get install mysql-community-server
		apt-get install mysql-workbench

	• Installing the mysql-community-server packages also installs the packages for the components the server requires.

(See file 1.Installing MySQL 5.7  on Debian)



************  Adding Yum  Repository

• Download the Yum repository RPM file from http://dev.mysql.com/downloads/repo/yum/.

	- Choose the correct RPM for your distribution.
	- Example: The "Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package" is called  mysql80-community-release-el7-3.noarch.rpm
	
	- Install the file by using the yum localinstall command, for example:

		$ yum localinstall mysql80-community-release-el7-3.noarch.rpm

	- The preceding command adds the MySQL Yum repository to the host''s Yum configuration.

• Enable or disable specific versions.
	- MySQL 8.0 is enabled by default. Other versions are disabled.

• Run "yum install <packagename>" to install a package from the new repository.


************  Configuring Yum Repository Versions

• Enable or disable specific versions by editing the /etc/yum.repos.d/mysql-community-repo file
• The latest Generally Available (GA) version is enabled by default.

The following extract shows the MySQL 5.7 repository is disabled:

	# Enable to use MySQL 5.7
	[mysql57-community]
	name=MySQL 5.7 Community Server
	baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/
	enabled=0
	gpgcheck=1
	gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql


To enable the MySQL 5.7 repository, change the value of the enabled setting so that it reads enabled=1.	

When you start the service for the first time using :
	service mysqld start or 
	systemctl start mysqld
	

************  Adding an APT Repository

Download the APT repository DEB file from http://dev.mysql.com/downloads/repo/apt/.

Supported distributions:
	Debian version 9
	Ubuntu LTS versions 16.04, and 18.04 and 18.10

Install the file by using the dpkg command:

	$dpkg -i mysql-apt-config 0.8.12-1_all.deb     <---- Opens an interactive window to select version to install

The preceding command adds the MySQL APT repository to the host''s APT configuration.

• Configure the repository versions.
• Run apt-get update to refresh the repository metadata.
• Run apt-get install packagename to install a package from the new repository.

*********** Manually Configuring the APT Repositories

Enable or disable specific repositories by editing

/etc/apt/sources.list.d/mysql.list:

• Performing the steps in the preceding slide results in the following configuration:

	### THIS FILE IS AUTOMATICALLY CONFIGURED ###

	#You may comment out entries below, but any other modifications may be lost.
	# Use command 'dpkg-reconfigure mysql-apt-config' as root for modifications.

	deb http://repo.mysql.com/apt/ubuntu/bionic mysql-apt-config
	deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0
	deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools

	#deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools- preview
	deb-src http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0

• Enable or disable a specific product repository by uncommenting or commenting its line,respectively	
	

*************** Installing MySQL on Windows

• MySQL Installer:

	Is distributed as an .msi executable
	Guides you through a configuration wizard to create the folders and configuration required to run MySQL

• Noinstall Archive:

	Is distributed as a .zip file
	Must be unpacked and moved to the desired installation location
	Must be manually configured to create the folders and configuration required to run MySQL
		

Installing MySQL as a Windows Service

	• With MySQL Installer:

		- Use the provided service name or select an alternative.

	• At the command line after installation:

		- Install the service manually:
			mysqld.exe --install servicename  -- defaults-file="C:\my.ini"

		- Remove an installed service:
			mysqld.exe --remove servicename

	• View the installed services by using the Services control panel application.

		- Launch from the command line:
			services.msc

	Set services to start automatically or manually and provide a Windows account withwhich to start the service


************   Installing MySQL from Source

Build MySQL from the source code when you need to:

	• Configure compiled-in options

		- Examples:
			- Disabling unused features on production servers with well-understood use cases to maximize performance
			- Enabling additional debugging features

	• Run MySQL on a platform for which there are no precompiled binaries
	• Add your own modifications (or community patches) to MySQL


************ Installing MySQL from Binary Archive

If you do not install from a package manager, you must perform some configuration steps manually.

1.Create the mysql user and group.

	# groupadd mysql
	# useradd -r -g mysql -s /bin/false mysql		<--- Adds a user with no home and no pwd

2.Extract the archive to a suitable directory while logged in as mysql. 
	- Alternatively, change the ownership of the extracted archive to mysql after extracting it.

	# mkdir /usr/local/mysql-8.0.x/
	# chown mysql:mysql /usr/local/mysql-8.0.x/
	# cd /usr/local/mysql-8.0.x/
	# tar xf ~/mysql-8.0.x-linux-glibc2.12-x86_64.tar.gz

3. Create the initial configuration file.

	- Copy my-default.cnfto/etc/my.cnf.
	- Edit the datadir setting to point to the data directory.
	- Edit the basedir setting to point to the installation directory.
	- Edit any other required settings:
		+ Log file settings
		+ TCP port

4. Initialize the data directory and note the generated temporary password:

	# bin/mysqld --initialize --user=mysql

5. Start the MySQL Server.

	# bin/mysqld safe --user=mysql &

6. Connect to the MySQL server using the temporary password.

	# mysql -u root -p

	Enter password: (enter the random password)

	mysql>

7. Change the root user password.

	mysql> ALTER USER USER() IDENTIFIED BY 'new password';

8. Optionally, populate time zone tables.

	Example:

	# mysql_tzinfo to sql /usr/share/zoneinfo | mysql -u root mysql -p


***********  Deploying MySQL Server with Docker

You need to install the Docker engine and client on your host machine first.

1. Download a MySQL Server Docker image.
	- Using the MySQL Community Edition image
		- Log in to Docker Hub and pull the image using the docker command:

			# docker pull mysql/mysql-server

	- Using the MySQL Enterprise Edition image
		- Log in to My Oracle Support and download the MySQL Commercial Server Docker Image
		- Load the image using the docker command:

		# docker load -i mysql-enterprise-server-version.tar

2. List all the downloaded images.

		$ docker images
			
			REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

		$vi /etc/resolv.conf 			<---- Added the lines to be able to reach docker repo
		
			nameserver 8.8.8.8
			nameserver 8.8.4.4
			nameserver 127.0.0.53
		
		$ docker pull mysql:latest
			
			latest: Pulling from library/mysql
			.......
			Digest: sha256:0255b469f0135a0236d672d60e3154ae2f4538b146744966d96440318cc822c6
			Status: Downloaded newer image for mysql:latest
			docker.io/library/mysql:latest

		$ docker images
		
		REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
		mysql        latest    56a8c14e1404   8 weeks ago   603MB
		

3. Create a MySQL Server Docker container:

	# docker run --name=mysql1 -d mysql/mysql-server

4. View the MySQL server logs:

	# docker logs mysql1

Retrieve the generated temporary password:

	# docker logs mysqll 2>&1 | grep GENERATED

5. Connect to the MySQL server from within the container:

	# docker exec -it mysql1 mysql -uroot -p	
		Enter the temporary password
		Change the root user password:

	mysql> ALTER USER USER() IDENTIFIED BY 'new password';
	
	
	

Demo :

$ docker run --name=mysql1 -d mysql/mysql-server

	Unable to find image 'mysql/mysql-server:latest' locally
	latest: Pulling from mysql/mysql-server
	.....
	Digest: sha256:d6c8301b7834c5b9c2b733b10b7e630f441af7bc917c74dba379f24eeeb6a313
	Status: Downloaded newer image for mysql/mysql-server:latest
	95d6a57d81aaf1e18313301e00030706b763173da10e5e0e238a88ee2aa3985c

$ docker images

	REPOSITORY           TAG       IMAGE ID       CREATED         SIZE
	mysql                latest    56a8c14e1404   8 weeks ago     603MB
	mysql/mysql-server   latest    1d9c2219ff69   23 months ago   496MB
	
$ docker ps -a

CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS  							 PORTS                       NAMES
95d6a57d81aa   mysql/mysql-server   "/entrypoint.sh mysq…"   24 seconds ago   Up 22 seconds (health: starting)   3306/tcp, 33060-33061/tcp   mysql1

$ docker logs mysql1 2>&1 | grep GENERATED
[Entrypoint] GENERATED ROOT PASSWORD: 0e.ajBBSK.0/8^p278E=1Rku2p^lo^.Z
				
$ docker exec -it mysql1 mysql -uroot -p

Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 18
Server version: 8.0.32

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> ALTER USER USER() IDENTIFIED BY 'root';				<----- root/root for mysql
Query OK, 0 rows affected (0.04 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.05 sec)

mysql>


-- ================   Files and Directories on Linux

Directories may vary depending on the distribution 

	/var/lib/mysql 	: datadir for default data directory
	/etc			: my.cnf configuration
	/usr/sbin/		: mysqld Server
	/usr/bin/		: mysql and other client programs
	/var/lib/mysql-keyring
	/var/lib/mysql-files
	/var/log/mysql	: mysqld.log error log
	
	/usr/lib/systemd/system :
		+ mysqld.service (single instance systemd startup scripts)
		+ mysqld@.service (multi instances systemd startup scripts)
		
C:\Program Files\MySQL\MySQL Server 8.0\   (contains file : my.ini)

	bin\		: mysqld.exe, clients and utility programs
	include\	: Include (header) files
	lib\		: Library files
	share\		: Miscellaneous support files, including error messages, character set files, sample configuration files, SQL for database installation
	Data\
			+ mysql and other database directories
			+ InnoDB log files, undo tablespaces, and system tablespace
			+ mysql.ibd (data dictionary tablespace)

	Uploads\


----- mysqld: MySQL Server Process

• Launched automatically by one of the server helper programs
	- Including operating system startup scripts

• Launched manually to debug the MySQL server configuration
	- The error messages go to the terminal by default rather than to the error log.
	- Example:
		$ mysqld --user=mysql --datadir=/var/lib/mysql --socket=/tmp/mysql.sock


Installation Programs

• mysql_secure_installation:

	- Security program that enables initial secure configuration

• mysql_tzinfo_to_sql:

	- Utility that creates a SQL script containing the host''s time zone information

• mysql_upgrade:

	- Program that verifies database contents and ensures that they are compatible with the current version of MySQL
	- Deprecated since MySQL Server 8.0.16 where the tasks are performed automatically when the server starts up

---------- Utility Programs

	• mysql_config_editor (auto login): Manages login paths to simplify how you connect command-line clients to the MySQL server
	• mysqlbinlog (for recovery): Reads and replays the contents of the binary log
	• mysqldumpslow (slow queries): Reads and summarizes the contents of the slow query log
	• mysql_ssl_rsa_setup : Creates TLS keys and certificates
	• ibd2sdi : Extracts serialized dictionary information (SDI) from InnoDB tablespace files  (replaces frm files ??)


mysql_config_editor : Useful for different mysql envs you want to login

	Use mysql_config_editor to create encrypted option files.

	• Store user, password, and host options in a dedicated option file:

		-	.mylogin.cnf in the current user''s home directory
		-	To specify an alternative file name, set the MYSQL_TEST_LOGIN_FILE environment variable.

	• The .mylogin.cnf file contains login paths.

		- They are similar to option groups.
		- Each login path contains authentication information for a single identity.
		- Clients refer to a login path with the --login-path (or -L) command-line option:

		# mysql --login-path=admin [or -L=admin]

		- Protect the file from being read by other users. Anyone who can read the file can use the credentials and is able to obtain the plain text passwords.

.mylogin.cnf Format  ----------------------------------------

• The decrypted.mylogin.cnf file consists of option groups.

	- Similar to other option files

• Each option group in .mylogin.cnf is a login path.

	- A set of values indicating the server host and the credentials for authenticating with that server
	- Permits only a limited set of options (user, password, and host)

• 	Example:

	[admin]
	user = root
	password = oracle
	host = 127.0.0.1

Login Paths ----------------------------------------

	• To create a login path:

		mysql_config_editor set --login-path=login-path --user=username --password 	--host=hostname

	• To view a single login path in clear text:

		mysql_config_editor print 	--login-path=login-path

	• To view all login paths in clear text:

		mysql_config_editor print --all

	• To remove a login path:

		mysql_config_editor  remove --login-path=login-path

	• The default login path name is [client]. It is read by all standard clients.


Command-Line Client Programs   ----------------------------------------

	• mysql: MySQL command-line client
	• mysqladmin: Utility for monitoring, administering, and shutting down MySQL
	• mysqldump/mysqlpump: Backup utilities that create SQL scripts to restore the structure and contents of databases
	• mysqlimport: Utility for importing the contents of delimited data files
	• mysqlslap: Load emulation client
	• mysqlshow: Utility for displaying database object metadata
	• mysqlcheck: Utility for checking and optimizing tables
	• mysqlsh: MySQL Shell is an advanced command-line client and code editor for MySQL Server.



--=============  STARTING AND STOPPING MYSQL ============================

Methods of starting MySQL:

	+ Run the mysqld binary directly.
	+ Run "mysqld_safe".
	+ Use the Linux service manager
		- Run "service mysqld start" on SysVInit systems.
		- Run "systemctl start mysqld" on systemd.

Methods of stopping MySQL:

	+ Kill the "mysqld" binary with the "SIGTERM" signal (-15).
		Kill "mysqld_safe" first if it is running.

	+ Use the Linux service manager
		- Run "service mysqld stop" on SysVInit systems.
		- Run "systemctl stop mysqld" on systemd.

	+ mysqladmin shutdown						<----- We can use mysqladmin to shutdown but not to start the service. mysqladmin is used when db is up
	+ SQL "SHUTDOWN" statement


Stopping MySQL with mysqladmin ---------------------------------

+ Using the [client] login path:

	$ mysqladmin shutdown

+ Using the [admin] login path:

	$ mysqladmin --login-path=admin shutdown

+ Providing credentials and server connections at the command line:

	$ mysqladmin -u root -p -h dbhost -P 3306 shutdown     <----- 3306 is mysql default port

	Enter password: password
	
	
MySQL Service Files		---------------------------------

• On SysVInit systems, copy the mysql.server script to /etc/init.d/mysqld.

	Some package installers create this file automatically.
	Call it with start, stop, or restart options.
	Examples:

		service mysqld start
		/etc/init.d/mysqld restart
		support-files/mysql.server stop

• When you install MySQL from an RPM package built for systemd distributions or if you have configured systemd manually, use the "systemctl" command:

	systemctl start mysqld
	systemctl stop mysqld

	This uses the mysqld.service file, which is a systemd service unit configuration file


• On Windows

	+ Run the server process directly.

		mysqld.exe

	+ If you have installed MySQL as a Windows service:

		- An automatic service starts when Windows starts
		- Start and stop services manually from the Services control panel application Launched from the Start Menu or with the services.msccommand
		- Start and stop services manually from the command line with the net or sc commands:

			net start servicename
			sc start servicename
			net stop servicename
			sc stop servicename


• MySQL Notifier : 

	+ Installed by MySQL Installer
	+ Automatically registers MySQL services on the local machine
	+ Enables registration of remote MySQL services
	+ Displays the running status of registered servers
		- Displayed in the system tray
		- Optionally, notifies when a registered server changes status or when MySQL Notifier detects a new local MySQL service

	+ Enables starting, restarting, and stopping registered servers
	+ Launches installed MySQL applications:
		- MySQL Workbench
		- MySQL Utilities
		- MySQL Installer


Upgrading MySQL		---------------------------------

	+ The easiest upgrade is between minor versions within the same series.
		Example: Upgrading from 8.0.xx to 8.0.yy

	+ You can upgrade from MySQL 5.7 to 8.0
		- Only between General Availability (GA) releases, MySQL 5.7.9, or later
		- Oracle recommends upgrading to the latest 5.7 GA release before upgrading to MySQL 8.0.

	+ Be aware of differences between the versions so that you can choose the correct upgrade method (in-place or logical) and avoid compatibility problems.
	+ Even if you are performing an in-place upgrade, you should back up your data beforehand.
		- This enables you to roll back the upgrade if you encounter problems.

Reading Release Notes :

Before you upgrade, view the changes between your existing version and the target version:

	• For MySQL 8.0, use the following URL:
		https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html

	• For previous versions, replace 8.0 in the URL. For example, MySQL 5.7:
		https://dev.mysql.com/doc/refman/5.7/en/upgrading-from-previous-series.html

	• You may want to view the release notes for the changes between the minor versions.
		https://dev.mysql.com/doc/relnotes/mysql/8.0/en/index.html

	• Look for the following headings, which denote changes that you might need to handle before you upgrade:
		Known Issue
		Incompatible Change
		etc


MySQL Shell Upgrade Checker Utility 	---------------------------------

• The util.checkForServerUpgrade() function:

	Is available in MySQL Shell
	Enables you to verify whether MySQL server instances are ready for upgrade
	Checks for compatibility errors and issues for upgrade to MySQL 8.0
	Supports only MySQL Server 5.7 and 8.0 General Availability (GA) releases
	Checks the configuration file (my.cnf or my. ini) if you provide the file path

• The version of MySQL Shell must be the same or later than the version of MySQL Server to which you are upgrading.
• The following example checks a MySQL server for upgrade to release 8.0.18:
	mysqlsh --util checkForServerUpgrade user@localhost:3306 --target-version=8.0.18 --config-path=/etc/mysql/my.cnf


Using In-Place Upgrade Method   	---------------------------------

Use the in-place (physical) upgrade method when you upgrade within a series or from one major version to the next.

	- Stop the MySQL server process.
	- Use file copy to back up the current databases. (Optional, but recommended)
	- Replace the mysqld binary with the new version.
	- Start the MySQL server process using the new binary.
	- Prior to MySQL 8.0.16, you must run mysql upgrade. In MySQL 8.0.16 and higher, the server restart will perform all the upgrade tasks automatically.

This is the recommended method to upgrade from MySQL 5.7 to 8.0.

Using Logical Upgrade Method   	---------------------------------

• Use the logical (backup/restore) upgrade method when you upgrade to one or more later major versions.
	- Use mysqldump to back up the current databases.
	- Install and initialize a new MySQL server.
	- Start the new MySQL server.
	- Restore the backed-up databases from the dump file.
		- May result in errors due to incompatibilities introduced by new, changed, deprecated, or removed features and capabilities

• Prior to MySQL 8.0.16, you must run mysql_upgrade. In MySQL 8.0.16 and higher, you must shut down the server and restart it with 
		the --upgrade=FORCE option to perform the remaining upgrade tasks.
		
		
mysql_upgrade :

	- Checks all tables in your databases for incompatibilities with current versions of the MySQL server
	- Repairs any problems found in tables with possible incompatibilities
	- Upgrades system tables to add any new privileges or capabilities that are available in the new version
	- Marks all checked and repaired tables with the current MySQL version number
	- Not required for MySQL server 8.0.16 or later. The server will perform all the upgrade processes during startup. 
	    A new option --upgrade is introduced in 8.0.16 to control the upgrade process.



Demo 1 : Installing MySQL ---------------------------------


1. Extract the MySQL 5.7 binary archive from /stage/MySQL-Server/mysql-advanced- 5.7.*.tar.gz to/opt.

	# cd /opt
	# tar xf /stage/MySQL-Server/mysql-advanced-5.7*.tar.gz

2. Create a symbolic link from the newly extracted MySQL directory to '/usr/local/mysql'.

	Enter the following command at the Linux terminal prompt:

	# ln -s /opt/mysql* /usr/local/mysql

When you install a new version of MySQL in the practice titled "Upgrading MySQL," you replace this symbolic link with a link to the new 
version's directory without overwriting the existing version's directory.

3. View the contents of the '/usr/local/mysql/bin' directory.

	# ls /usr/local/mysql/bin
		
4. Add/usr/local/mysql/bin to the root user''s executable search path :

	$vi .bashrc
	
	....
	export PATH=$PATH:/usr/local/mysql/bin to the ~/.bashrc file. 

5. Apply your changes to the ~/.bashrc file by executing the Linux source command.

	# source ~/.bashrc

6. Copy the/labs/my.cnf file to/etc/my.cnf.

	# cp  /labs/my.cnf  /etc/my.cnf

	- Some Linux distributions include a /etc/my.cnf. The Oracle Linux version used in classroom environments does not.

7. View the contents of the /etc/my.cnf file.

	Open the /etc/my.cnf file 

		$ vi /etc/my.cnf
		
			[mysqld]
			datadir = /var/lib/mysql
			socket = /var/lib/mysql/mysql.sock
			user = mysql

			# Disabling symbolic-links is recommended to prevent assorted security risks
			symbolic-links-0

			[mysqld_safe]
			log-error = /var/log/mysqld.log 
			pid-file=/var/run/mysqld/mysqld.pid
		
		EOF
		
NB : The options in the /etc/my.cnf file specify the following:

	- The data directory is in /var/lib/mysql.
	- The socket file is in the data directory.
	- The process runs as the mysql user.
	- When you launch MySQL via mysqld_safe, the server logs errors in the /var/log/mysqld. log file, and the PID file is in the /var/run/mysqld directory.
	- The default base directory (not amended in /etc/my.cnf) is /usr/local/mysql.

8. The mysql user does not as yet exist on the host machine. Create it as a system user by executing the adduser-r command.

	# adduser -r mysql

NB : The -r switch creates a system user that has no password, that does not expire, and that has no home directory. It also creates a group with the same name.

9. Initialize the data directory by executing mysqld-initialize and note the temporary password that appears.

	# mysqld --initialize
	
		.....
		<date-and-time> 0 (Warning) CA certificate ca.pem is self signed.
		<date-and-time> 1 [Note] A temporary password is generated for root@localhost: 3C_Va/o*88DP
		
The '--initialize' command-line option creates a new data directory in /var/lib/mysql owned by the mysql user and group, using the settings in the /etc/my.cnf
 file. The new data dir contains the initial InnoDB System Tablespace, system databases and SSL encryption keys and certificates. A default root pwd is created
 very useful for 1st connexion

10. The pid-file option refers to the /var/run/mysqld directory, which does not as yet exis. Create that directory and grant its ownership to the mysql user 
and group.

	# mkdir /var/run/mysqld
	# chown mysql:mysql /var/run/mysqld/

11. Launch MySQL by executing the mysqld_safe script.

	# mysqld_safe &

MySQL is now running.

Demo 2 : Connecting to MySQL ---------------------------------

1. The /etc/my.cnf file does not as yet contain an option group that configures the client. Add a [client] option group that contains the same socket value 
	as the value contained in the [mysqld] option group.

	[client]
	socket=/var/lib/mysql/mysql.sock

2. Launch the mysql command-line client, logging in as the root user with the temporary password that you noted in the preceding practice.

	# mysql -uroot -p

	Enter password: 3C_Va/o*88DP

	Welcome to the MySQL monitor. Commands end with or \g.
	Your MySQL connection id is 2
	Server version: 5.7.28-enterprise-commercial-advanced
	...
	mysql> 
	
3. Attempt to change the current database to mysql and note the error message that appears.

	mysql> USE mysql

	ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.
	
4. Change the MySQL root password to oracle.

	mysql> ALTER USER USER () IDENTIFIED BY 'oracle';

	Query OK, 0 rows affected (1.44 sec)

- The USER () function returns the current user''s full account name (in this case, root@localhost) and provides a useful way to identify 
	the current user without typing out the full account name.

5. Log out of the mysql client.

mysql> EXIT

6. Log in again, this time providing the new password.

	$ mysql -uroot -p

	Enter password: oracle

	Welcome to the MySQL monitor. Commands end with or \g.

	Your MySQL connection id is 3

	mysql>

	- MySQL accepts the new password.

7. Attempt to change the current database to mysql and note any differences in behavior from step 3.

	mysql> USE mysql

	Database changed

	mysql>

	- The command changes the default database successfully. When you change the initial temporary password, it re-enables the account.
	out of the mysql client.

	mysql> EXIT

Demo 3 : Configuring MySQL service	---------------------------------

1. Stop the MySQL server by executing an appropriate mysqladmin command.

	$ mysqladmin -uroot -p shutdown

	Enter password: oracle

2. Inspect the contents of the/labs/service/mysql-5.7/mysqld.service file. This is the service unit configuration file.

# cat/labs/service-5.7/mysqld.service

	[Unit]
	Description-MySQL Server
	Documentation man=mysqld (8)
	Documentation-http://dev.mysql.com/doc/refman/en/using-systemd.html
	After=network.target
	After=syslog.target

	[Install]
	WantedBy-multi-user.target

	[Service]
	User=mysql
	Group=mysql

	Type=forking

	PIDFile=/usr/local/mysql/data/mysqld.pid

	# Disable service start and stop timeout logic of systemd for mysqld service.

	TimeoutSec=0

	#Start main service

	ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --daemonize --pid-file=/usr/local/mysql/data/mysqld.pid $MYSQLD_OPTS

	#Use this to switch malloc implementation
	EnvironmentFile=-/etc/sysconfig/mysql

	#Sets open files_limit
	LimitNOFILE = 5000

	Restart=on-failure

	RestartPreventExitStatus=1

	PrivateTmp=false
	
	EOF	
	
3. Copy the 'mysqld.service' file to the '/usr/lib/systemd/system' directory.

	$ cp  /labs/service-5.7/mysqld.service /usr/lib/systemd/system

4. Enter a systemctl command that enables the mysqld service to start automatically when the host machine reboots.

	$ systemctl enable mysqld.service

		Created symlink from /etc/systemd/system/multi-user.target.wants/mysqld.service to /usr/lib/systemd/system/mysqld.service.

5. Enter a systemctl command that starts the mysqld service.

	$ systemctl start mysqld	
	
	
	