---------- MYSQL course from Oracle learning

-----   Chap.1
MySQL Enterprise Edition

	Advanced Features

		• High Availability
		• Authentication
		• Audit
		• Encryption and TDE
		• Firewall
		• Masking

	Management Tools

		• Monitoring
		• Backup
		• Development
		• Administration
		• Migration

	Support

		• Technical Support
		• Consultative Support
		• Oracle Certifications

Oracle Premier Support for MySQL

		• Largest MySQL engineering and support organization
		• Backed by the MySQL developers
		• World-class support, in 29 languages
		• Hot fixes and maintenance releases
		• 24 x 7 x 365
		• Unlimited incidents
		• Consultative support
		• Global scale and reach

MySQL integrates into the Oracle Environment

		Oracle Linux
		Oracle GoldenGate
		Oracle Secure Backup
		Oracle Fusion Middleware
		Oracle Enterprise Manager
		Oracle Database Firewall
		Oracle Audit Vault
		Oracle Key Vault

MySQL Websites

	• http://www.mysql.com includes:

		Product information
		Services (Training, Certification, and Support)
		White papers, webinars, and other resources
		MySQL Enterprise Edition (trial version)

	• http://dev.mysql.com includes:

	Developer Zone (Forums, MySQL Engineering Blogs, and more)
	Documentation
	Downloads

	• https://github.com/mysql

		Source code for MySQL Server and other MySQL products


Softs à installer pour labs :


[root@edvmr1p0~#ls/stage/MySQL-Server/     

	mysql-advanced-5.7.28-e17-x86_64.tar.gz
	mysql-commercial-8.0.18-el7-x86_64.tar.gz
	mysql-enterprise-server-8.0.18.tar
	
----------------- Installing MySQL from Downloaded Packages

Download and install packages using the following commands:

	On RPM-based systems, including Oracle Linux, Red Hat, Fedora, and CentOS:  

		rpm -ivh packagename.rpm
	
	On APT-based systems, including Ubuntu and Debian:

		dpkg -i packagename.deb
		
		•
For Debian installation : 

	DEB packages are available for APT Linux systems, either individually or bundled.
	
	$sudo dpkg -i mysql-{common,community-client,client, community-server,server} *.deb


For automatic installation : 

	On RPM-based systems, including Oracle Linux, Red Hat, Fedora, and CentOS, use yum install.

		yum install mysql-community-server
		yum install mysql-workbench

	On APT-based systems, including Ubuntu and Debian, use apt-get install:

		apt-get install mysql-community-server
		apt-get install mysql-workbench

	• Installing the mysql-community-server packages also installs the packages for the components the server requires.

(See file 1.Installing MySQL 5.7  on Debian)



************  Adding Yum  Repository

• Download the Yum repository RPM file from http://dev.mysql.com/downloads/repo/yum/.

	- Choose the correct RPM for your distribution.
	- Example: The "Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package" is called  mysql80-community-release-el7-3.noarch.rpm
	
	- Install the file by using the yum localinstall command, for example:

		$ yum localinstall mysql80-community-release-el7-3.noarch.rpm

	- The preceding command adds the MySQL Yum repository to the host''s Yum configuration.

• Enable or disable specific versions.
	- MySQL 8.0 is enabled by default. Other versions are disabled.

• Run "yum install <packagename>" to install a package from the new repository.


************  Configuring Yum Repository Versions

• Enable or disable specific versions by editing the /etc/yum.repos.d/mysql-community-repo file
• The latest Generally Available (GA) version is enabled by default.

The following extract shows the MySQL 5.7 repository is disabled:

	# Enable to use MySQL 5.7
	[mysql57-community]
	name=MySQL 5.7 Community Server
	baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/
	enabled=0
	gpgcheck=1
	gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql


To enable the MySQL 5.7 repository, change the value of the enabled setting so that it reads enabled=1.	

When you start the service for the first time using :
	service mysqld start or 
	systemctl start mysqld
	

************  Adding an APT Repository

Download the APT repository DEB file from http://dev.mysql.com/downloads/repo/apt/.

Supported distributions:
	Debian version 9
	Ubuntu LTS versions 16.04, and 18.04 and 18.10

Install the file by using the dpkg command:

	$dpkg -i mysql-apt-config 0.8.12-1_all.deb     <---- Opens an interactive window to select version to install

The preceding command adds the MySQL APT repository to the host''s APT configuration.

• Configure the repository versions.
• Run apt-get update to refresh the repository metadata.
• Run apt-get install packagename to install a package from the new repository.

*********** Manually Configuring the APT Repositories

Enable or disable specific repositories by editing

/etc/apt/sources.list.d/mysql.list:

• Performing the steps in the preceding slide results in the following configuration:

	### THIS FILE IS AUTOMATICALLY CONFIGURED ###

	#You may comment out entries below, but any other modifications may be lost.
	# Use command 'dpkg-reconfigure mysql-apt-config' as root for modifications.

	deb http://repo.mysql.com/apt/ubuntu/bionic mysql-apt-config
	deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0
	deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools

	#deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools- preview
	deb-src http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0

• Enable or disable a specific product repository by uncommenting or commenting its line,respectively	
	

*************** Installing MySQL on Windows

• MySQL Installer:

	Is distributed as an .msi executable
	Guides you through a configuration wizard to create the folders and configuration required to run MySQL

• Noinstall Archive:

	Is distributed as a .zip file
	Must be unpacked and moved to the desired installation location
	Must be manually configured to create the folders and configuration required to run MySQL
		

Installing MySQL as a Windows Service

	• With MySQL Installer:

		- Use the provided service name or select an alternative.

	• At the command line after installation:

		- Install the service manually:
			mysqld.exe --install servicename  -- defaults-file="C:\my.ini"

		- Remove an installed service:
			mysqld.exe --remove servicename

	• View the installed services by using the Services control panel application.

		- Launch from the command line:
			services.msc

	Set services to start automatically or manually and provide a Windows account withwhich to start the service


************   Installing MySQL from Source

Build MySQL from the source code when you need to:

	• Configure compiled-in options

		- Examples:
			- Disabling unused features on production servers with well-understood use cases to maximize performance
			- Enabling additional debugging features

	• Run MySQL on a platform for which there are no precompiled binaries
	• Add your own modifications (or community patches) to MySQL


************ Installing MySQL from Binary Archive

If you do not install from a package manager, you must perform some configuration steps manually.

1.Create the mysql user and group.

	# groupadd mysql
	# useradd -r -g mysql -s /bin/false mysql		<--- Adds a user with no home and no pwd

2.Extract the archive to a suitable directory while logged in as mysql. 
	- Alternatively, change the ownership of the extracted archive to mysql after extracting it.

	# mkdir /usr/local/mysql-8.0.x/
	# chown mysql:mysql /usr/local/mysql-8.0.x/
	# cd /usr/local/mysql-8.0.x/
	# tar xf ~/mysql-8.0.x-linux-glibc2.12-x86_64.tar.gz

3. Create the initial configuration file.

	- Copy my-default.cnfto/etc/my.cnf.
	- Edit the datadir setting to point to the data directory.
	- Edit the basedir setting to point to the installation directory.
	- Edit any other required settings:
		+ Log file settings
		+ TCP port

4. Initialize the data directory and note the generated temporary password:

	# bin/mysqld --initialize --user=mysql

5. Start the MySQL Server.

	# bin/mysqld safe --user=mysql &

6. Connect to the MySQL server using the temporary password.

	# mysql -u root -p

	Enter password: (enter the random password)

	mysql>

7. Change the root user password.

	mysql> ALTER USER USER() IDENTIFIED BY 'new password';

8. Optionally, populate time zone tables.

	Example:

	# mysql_tzinfo to sql /usr/share/zoneinfo | mysql -u root mysql -p


***********  Deploying MySQL Server with Docker

You need to install the Docker engine and client on your host machine first.

1. Download a MySQL Server Docker image.
	- Using the MySQL Community Edition image
		- Log in to Docker Hub and pull the image using the docker command:

			# docker pull mysql/mysql-server

	- Using the MySQL Enterprise Edition image
		- Log in to My Oracle Support and download the MySQL Commercial Server Docker Image
		- Load the image using the docker command:

		# docker load -i mysql-enterprise-server-version.tar

2. List all the downloaded images.

		$ docker images
			
			REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

		$vi /etc/resolv.conf 			<---- Added the lines to be able to reach docker repo
		
			nameserver 8.8.8.8
			nameserver 8.8.4.4
			nameserver 127.0.0.53
		
		$ docker pull mysql:latest
			
			latest: Pulling from library/mysql
			.......
			Digest: sha256:0255b469f0135a0236d672d60e3154ae2f4538b146744966d96440318cc822c6
			Status: Downloaded newer image for mysql:latest
			docker.io/library/mysql:latest

		$ docker images
		
		REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
		mysql        latest    56a8c14e1404   8 weeks ago   603MB
		

3. Create a MySQL Server Docker container:

	# docker run --name=mysql1 -d mysql/mysql-server

4. View the MySQL server logs:

	# docker logs mysql1

Retrieve the generated temporary password:

	# docker logs mysqll 2>&1 | grep GENERATED

5. Connect to the MySQL server from within the container:

	# docker exec -it mysql1 mysql -uroot -p	
		Enter the temporary password
		Change the root user password:

	mysql> ALTER USER USER() IDENTIFIED BY 'new password';
	
	
	

Demo :

$ docker run --name=mysql1 -d mysql/mysql-server

	Unable to find image 'mysql/mysql-server:latest' locally
	latest: Pulling from mysql/mysql-server
	.....
	Digest: sha256:d6c8301b7834c5b9c2b733b10b7e630f441af7bc917c74dba379f24eeeb6a313
	Status: Downloaded newer image for mysql/mysql-server:latest
	95d6a57d81aaf1e18313301e00030706b763173da10e5e0e238a88ee2aa3985c

$ docker images

	REPOSITORY           TAG       IMAGE ID       CREATED         SIZE
	mysql                latest    56a8c14e1404   8 weeks ago     603MB
	mysql/mysql-server   latest    1d9c2219ff69   23 months ago   496MB
	
$ docker ps -a

CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS  							 PORTS                       NAMES
95d6a57d81aa   mysql/mysql-server   "/entrypoint.sh mysq…"   24 seconds ago   Up 22 seconds (health: starting)   3306/tcp, 33060-33061/tcp   mysql1

$ docker logs mysql1 2>&1 | grep GENERATED
[Entrypoint] GENERATED ROOT PASSWORD: 0e.ajBBSK.0/8^p278E=1Rku2p^lo^.Z
				
$ docker exec -it mysql1 mysql -uroot -p

Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 18
Server version: 8.0.32

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> ALTER USER USER() IDENTIFIED BY 'root';				<----- root/root for mysql
Query OK, 0 rows affected (0.04 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.05 sec)

mysql>


-- ================   Files and Directories on Linux

Directories may vary depending on the distribution 

	/var/lib/mysql 	: datadir for default data directory
	/etc			: my.cnf configuration
	/usr/sbin/		: mysqld Server
	/usr/bin/		: mysql and other client programs
	/var/lib/mysql-keyring
	/var/lib/mysql-files
	/var/log/mysql	: mysqld.log error log
	
	/usr/lib/systemd/system :
		+ mysqld.service (single instance systemd startup scripts)
		+ mysqld@.service (multi instances systemd startup scripts)
		
C:\Program Files\MySQL\MySQL Server 8.0\   (contains file : my.ini)

	bin\		: mysqld.exe, clients and utility programs
	include\	: Include (header) files
	lib\		: Library files
	share\		: Miscellaneous support files, including error messages, character set files, sample configuration files, SQL for database installation
	Data\
			+ mysql and other database directories
			+ InnoDB log files, undo tablespaces, and system tablespace
			+ mysql.ibd (data dictionary tablespace)

	Uploads\


----- mysqld: MySQL Server Process

• Launched automatically by one of the server helper programs
	- Including operating system startup scripts

• Launched manually to debug the MySQL server configuration
	- The error messages go to the terminal by default rather than to the error log.
	- Example:
		$ mysqld --user=mysql --datadir=/var/lib/mysql --socket=/tmp/mysql.sock


Installation Programs

• mysql_secure_installation:

	- Security program that enables initial secure configuration

• mysql_tzinfo_to_sql:

	- Utility that creates a SQL script containing the host''s time zone information

• mysql_upgrade:

	- Program that verifies database contents and ensures that they are compatible with the current version of MySQL
	- Deprecated since MySQL Server 8.0.16 where the tasks are performed automatically when the server starts up

---------- Utility Programs

	• mysql_config_editor (auto login): Manages login paths to simplify how you connect command-line clients to the MySQL server
	• mysqlbinlog (for recovery): Reads and replays the contents of the binary log
	• mysqldumpslow (slow queries): Reads and summarizes the contents of the slow query log
	• mysql_ssl_rsa_setup : Creates TLS keys and certificates
	• ibd2sdi : Extracts serialized dictionary information (SDI) from InnoDB tablespace files  (replaces frm files ??)


mysql_config_editor : Useful for different mysql envs you want to login

	Use mysql_config_editor to create encrypted option files.

	• Store user, password, and host options in a dedicated option file:

		-	.mylogin.cnf in the current user''s home directory
		-	To specify an alternative file name, set the MYSQL_TEST_LOGIN_FILE environment variable.

	• The .mylogin.cnf file contains login paths.

		- They are similar to option groups.
		- Each login path contains authentication information for a single identity.
		- Clients refer to a login path with the --login-path (or -L) command-line option:

		# mysql --login-path=admin [or -L=admin]

		- Protect the file from being read by other users. Anyone who can read the file can use the credentials and is able to obtain the plain text passwords.

.mylogin.cnf Format  ----------------------------------------

• The decrypted.mylogin.cnf file consists of option groups.

	- Similar to other option files

• Each option group in .mylogin.cnf is a login path.

	- A set of values indicating the server host and the credentials for authenticating with that server
	- Permits only a limited set of options (user, password, and host)

• 	Example:

	[admin]
	user = root
	password = oracle
	host = 127.0.0.1

Login Paths ----------------------------------------

	• To create a login path:

		mysql_config_editor set --login-path=login-path --user=username --password 	--host=hostname

	• To view a single login path in clear text:

		mysql_config_editor print 	--login-path=login-path

	• To view all login paths in clear text:

		mysql_config_editor print --all

	• To remove a login path:

		mysql_config_editor  remove --login-path=login-path

	• The default login path name is [client]. It is read by all standard clients.


Command-Line Client Programs   ----------------------------------------

	• mysql: MySQL command-line client
	• mysqladmin: Utility for monitoring, administering, and shutting down MySQL
	• mysqldump/mysqlpump: Backup utilities that create SQL scripts to restore the structure and contents of databases
	• mysqlimport: Utility for importing the contents of delimited data files
	• mysqlslap: Load emulation client
	• mysqlshow: Utility for displaying database object metadata
	• mysqlcheck: Utility for checking and optimizing tables
	• mysqlsh: MySQL Shell is an advanced command-line client and code editor for MySQL Server.



--=============  STARTING AND STOPPING MYSQL ============================

Methods of starting MySQL:

	+ Run the mysqld binary directly.
	+ Run "mysqld_safe".
	+ Use the Linux service manager
		- Run "service mysqld start" on SysVInit systems.
		- Run "systemctl start mysqld" on systemd.

Methods of stopping MySQL:

	+ Kill the "mysqld" binary with the "SIGTERM" signal (-15).
		Kill "mysqld_safe" first if it is running.

	+ Use the Linux service manager
		- Run "service mysqld stop" on SysVInit systems.
		- Run "systemctl stop mysqld" on systemd.

	+ mysqladmin shutdown						<----- We can use mysqladmin to shutdown but not to start the service. mysqladmin is used when db is up
	+ SQL "SHUTDOWN" statement


Stopping MySQL with mysqladmin ---------------------------------

+ Using the [client] login path:

	$ mysqladmin shutdown

+ Using the [admin] login path:

	$ mysqladmin --login-path=admin shutdown

+ Providing credentials and server connections at the command line:

	$ mysqladmin -u root -p -h dbhost -P 3306 shutdown     <----- 3306 is mysql default port

	Enter password: password
	
	
MySQL Service Files		---------------------------------

• On SysVInit systems, copy the mysql.server script to /etc/init.d/mysqld.

	Some package installers create this file automatically.
	Call it with start, stop, or restart options.
	Examples:

		service mysqld start
		/etc/init.d/mysqld restart
		support-files/mysql.server stop

• When you install MySQL from an RPM package built for systemd distributions or if you have configured systemd manually, use the "systemctl" command:

	systemctl start mysqld
	systemctl stop mysqld

	This uses the mysqld.service file, which is a systemd service unit configuration file


• On Windows

	+ Run the server process directly.

		mysqld.exe

	+ If you have installed MySQL as a Windows service:

		- An automatic service starts when Windows starts
		- Start and stop services manually from the Services control panel application Launched from the Start Menu or with the services.msccommand
		- Start and stop services manually from the command line with the net or sc commands:

			net start servicename
			sc start servicename
			net stop servicename
			sc stop servicename


• MySQL Notifier : 

	+ Installed by MySQL Installer
	+ Automatically registers MySQL services on the local machine
	+ Enables registration of remote MySQL services
	+ Displays the running status of registered servers
		- Displayed in the system tray
		- Optionally, notifies when a registered server changes status or when MySQL Notifier detects a new local MySQL service

	+ Enables starting, restarting, and stopping registered servers
	+ Launches installed MySQL applications:
		- MySQL Workbench
		- MySQL Utilities
		- MySQL Installer


Upgrading MySQL		---------------------------------

	+ The easiest upgrade is between minor versions within the same series.
		Example: Upgrading from 8.0.xx to 8.0.yy

	+ You can upgrade from MySQL 5.7 to 8.0
		- Only between General Availability (GA) releases, MySQL 5.7.9, or later
		- Oracle recommends upgrading to the latest 5.7 GA release before upgrading to MySQL 8.0.

	+ Be aware of differences between the versions so that you can choose the correct upgrade method (in-place or logical) and avoid compatibility problems.
	+ Even if you are performing an in-place upgrade, you should back up your data beforehand.
		- This enables you to roll back the upgrade if you encounter problems.

Reading Release Notes :

Before you upgrade, view the changes between your existing version and the target version:

	• For MySQL 8.0, use the following URL:
		https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html

	• For previous versions, replace 8.0 in the URL. For example, MySQL 5.7:
		https://dev.mysql.com/doc/refman/5.7/en/upgrading-from-previous-series.html

	• You may want to view the release notes for the changes between the minor versions.
		https://dev.mysql.com/doc/relnotes/mysql/8.0/en/index.html

	• Look for the following headings, which denote changes that you might need to handle before you upgrade:
		Known Issue
		Incompatible Change
		etc


MySQL Shell Upgrade Checker Utility 	---------------------------------

• The util.checkForServerUpgrade() function:

	Is available in MySQL Shell
	Enables you to verify whether MySQL server instances are ready for upgrade
	Checks for compatibility errors and issues for upgrade to MySQL 8.0
	Supports only MySQL Server 5.7 and 8.0 General Availability (GA) releases
	Checks the configuration file (my.cnf or my. ini) if you provide the file path

• The version of MySQL Shell must be the same or later than the version of MySQL Server to which you are upgrading.
• The following example checks a MySQL server for upgrade to release 8.0.18:
	mysqlsh --util checkForServerUpgrade user@localhost:3306 --target-version=8.0.18 --config-path=/etc/mysql/my.cnf


Using In-Place Upgrade Method   	---------------------------------

Use the in-place (physical) upgrade method when you upgrade within a series or from one major version to the next.

	- Stop the MySQL server process.
	- Use file copy to back up the current databases. (Optional, but recommended)
	- Replace the mysqld binary with the new version.
	- Start the MySQL server process using the new binary.
	- Prior to MySQL 8.0.16, you must run mysql upgrade. In MySQL 8.0.16 and higher, the server restart will perform all the upgrade tasks automatically.

This is the recommended method to upgrade from MySQL 5.7 to 8.0.

Using Logical Upgrade Method   	---------------------------------

• Use the logical (backup/restore) upgrade method when you upgrade to one or more later major versions.
	- Use mysqldump to back up the current databases.
	- Install and initialize a new MySQL server.
	- Start the new MySQL server.
	- Restore the backed-up databases from the dump file.
		- May result in errors due to incompatibilities introduced by new, changed, deprecated, or removed features and capabilities

• Prior to MySQL 8.0.16, you must run mysql_upgrade. In MySQL 8.0.16 and higher, you must shut down the server and restart it with 
		the --upgrade=FORCE option to perform the remaining upgrade tasks.
		
		
mysql_upgrade :

	- Checks all tables in your databases for incompatibilities with current versions of the MySQL server
	- Repairs any problems found in tables with possible incompatibilities
	- Upgrades system tables to add any new privileges or capabilities that are available in the new version
	- Marks all checked and repaired tables with the current MySQL version number
	- Not required for MySQL server 8.0.16 or later. The server will perform all the upgrade processes during startup. 
	    A new option --upgrade is introduced in 8.0.16 to control the upgrade process.



Demo 1 : Installing MySQL ---------------------------------


1. Extract the MySQL 5.7 binary archive from /stage/MySQL-Server/mysql-advanced- 5.7.*.tar.gz to/opt.

	# cd /opt
	# tar xf /stage/MySQL-Server/mysql-advanced-5.7*.tar.gz

2. Create a symbolic link from the newly extracted MySQL directory to '/usr/local/mysql'.

	Enter the following command at the Linux terminal prompt:

	# ln -s /opt/mysql* /usr/local/mysql

When you install a new version of MySQL in the practice titled "Upgrading MySQL," you replace this symbolic link with a link to the new 
version's directory without overwriting the existing version's directory.

3. View the contents of the '/usr/local/mysql/bin' directory.

	# ls /usr/local/mysql/bin
		
4. Add/usr/local/mysql/bin to the root user''s executable search path :

	$vi .bashrc
	
	....
	export PATH=$PATH:/usr/local/mysql/bin to the ~/.bashrc file. 

5. Apply your changes to the ~/.bashrc file by executing the Linux source command.

	# source ~/.bashrc

6. Copy the/labs/my.cnf file to/etc/my.cnf.

	# cp  /labs/my.cnf  /etc/my.cnf

	- Some Linux distributions include a /etc/my.cnf. The Oracle Linux version used in classroom environments does not.

7. View the contents of the /etc/my.cnf file.

	Open the /etc/my.cnf file 

		$ vi /etc/my.cnf
		
			[mysqld]
			datadir = /var/lib/mysql
			socket = /var/lib/mysql/mysql.sock
			user = mysql

			# Disabling symbolic-links is recommended to prevent assorted security risks
			symbolic-links-0

			[mysqld_safe]
			log-error = /var/log/mysqld.log 
			pid-file=/var/run/mysqld/mysqld.pid
		
		EOF
		
NB : The options in the /etc/my.cnf file specify the following:

	- The data directory is in /var/lib/mysql.
	- The socket file is in the data directory.
	- The process runs as the mysql user.
	- When you launch MySQL via mysqld_safe, the server logs errors in the /var/log/mysqld. log file, and the PID file is in the /var/run/mysqld directory.
	- The default base directory (not amended in /etc/my.cnf) is /usr/local/mysql.

8. The mysql user does not as yet exist on the host machine. Create it as a system user by executing the adduser-r command.

	# adduser -r mysql

NB : The -r switch creates a system user that has no password, that does not expire, and that has no home directory. It also creates a group with the same name.

9. Initialize the data directory by executing mysqld-initialize and note the temporary password that appears.

	# mysqld --initialize
	
		.....
		<date-and-time> 0 (Warning) CA certificate ca.pem is self signed.
		<date-and-time> 1 [Note] A temporary password is generated for root@localhost: 3C_Va/o*88DP
		
The '--initialize' command-line option creates a new data directory in /var/lib/mysql owned by the mysql user and group, using the settings in the /etc/my.cnf
 file. The new data dir contains the initial InnoDB System Tablespace, system databases and SSL encryption keys and certificates. A default root pwd is created
 very useful for 1st connexion

10. The pid-file option refers to the /var/run/mysqld directory, which does not as yet exis. Create that directory and grant its ownership to the mysql user 
and group.

	# mkdir /var/run/mysqld
	# chown mysql:mysql /var/run/mysqld/

11. Launch MySQL by executing the mysqld_safe script.

	# mysqld_safe &

MySQL is now running.

Demo 2 : Connecting to MySQL ---------------------------------

1. The /etc/my.cnf file does not as yet contain an option group that configures the client. Add a [client] option group that contains the same socket value 
	as the value contained in the [mysqld] option group.

	[client]
	socket=/var/lib/mysql/mysql.sock

2. Launch the mysql command-line client, logging in as the root user with the temporary password that you noted in the preceding practice.

	# mysql -uroot -p

	Enter password: 3C_Va/o*88DP

	Welcome to the MySQL monitor. Commands end with or \g.
	Your MySQL connection id is 2
	Server version: 5.7.28-enterprise-commercial-advanced
	...
	mysql> 
	
3. Attempt to change the current database to mysql and note the error message that appears.

	mysql> USE mysql

	ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.
	
4. Change the MySQL root password to oracle.

	mysql> ALTER USER USER () IDENTIFIED BY 'oracle';

	Query OK, 0 rows affected (1.44 sec)

- The USER () function returns the current user''s full account name (in this case, root@localhost) and provides a useful way to identify 
	the current user without typing out the full account name.

5. Log out of the mysql client.

mysql> EXIT

6. Log in again, this time providing the new password.

	$ mysql -uroot -p

	Enter password: oracle

	Welcome to the MySQL monitor. Commands end with or \g.

	Your MySQL connection id is 3

	mysql>

	- MySQL accepts the new password.

7. Attempt to change the current database to mysql and note any differences in behavior from step 3.

	mysql> USE mysql

	Database changed

	mysql>

	- The command changes the default database successfully. When you change the initial temporary password, it re-enables the account.
	out of the mysql client.

	mysql> EXIT

Demo 3 : Configuring MySQL service	---------------------------------

1. Stop the MySQL server by executing an appropriate mysqladmin command.

	$ mysqladmin -uroot -p shutdown

	Enter password: oracle

2. Inspect the contents of the/labs/service/mysql-5.7/mysqld.service file. This is the service unit configuration file.

# cat/labs/service-5.7/mysqld.service

	[Unit]
	Description-MySQL Server
	Documentation man=mysqld (8)
	Documentation-http://dev.mysql.com/doc/refman/en/using-systemd.html
	After=network.target
	After=syslog.target

	[Install]
	WantedBy-multi-user.target

	[Service]
	User=mysql
	Group=mysql

	Type=forking

	PIDFile=/usr/local/mysql/data/mysqld.pid

	# Disable service start and stop timeout logic of systemd for mysqld service.

	TimeoutSec=0

	#Start main service

	ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --daemonize --pid-file=/usr/local/mysql/data/mysqld.pid $MYSQLD_OPTS

	#Use this to switch malloc implementation
	EnvironmentFile=-/etc/sysconfig/mysql

	#Sets open files_limit
	LimitNOFILE = 5000

	Restart=on-failure

	RestartPreventExitStatus=1

	PrivateTmp=false
	
	EOF	
	
3. Copy the 'mysqld.service' file to the '/usr/lib/systemd/system' directory.

	$ cp  /labs/service-5.7/mysqld.service /usr/lib/systemd/system

4. Enter a systemctl command that enables the mysqld service to start automatically when the host machine reboots.

	$ systemctl enable mysqld.service

		Created symlink from /etc/systemd/system/multi-user.target.wants/mysqld.service to /usr/lib/systemd/system/mysqld.service.

5. Enter a systemctl command that starts the mysqld service.

	$ systemctl start mysqld	
	

Demo 4 : Upgrading MySQL service	---------------------------------

1. Install 'MySQL.Shell' from the RPM file in the /stage/MySQL-Shell directory.

	# cd/stage/MySQL-Shell
	# rpm -i mysql-shell-commercial-8*.rpm

	warning: mysql-shell-commercial-8.0.18-1.1.el7.x86 64.rpm: Header V3 DSA/SHAL Signature, key ID 5072e1f5: NOKEY

2. Run mysqlsh to perform a check for upgrade using the following command:

	# mysqlsh root@localhost --util checkForServerUpgrade

		Please provide the password for 'root@localhost': oracle
		Save password for 'root@localhost'? [Y]es/[N]o/Ne [v]er (default No): [press Enter)
		.....

3. Enter a systemctl command that stops the running mysqld service.

	# systemctl stop mysqld

4. Verify that the mysqld service is not running.

	# systemctl status mysqld

		mysqld.service MySQL Server
		Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)
		Active: inactive (dead) since
		....

5. Extract the MySQL Server 8.0 commercial edition binary archive from/stage/MySQL-Server to /opt.

	# cd /opt
	# tar xf /stage/MySQL-Server/mysql-commercial-8*.tar.gz

6. List the contents of the /opt directory to verify that both versions of MySQL server are installed.

	# ls /opt

		mysql-advanced-5.7.28-e17-x86_64
		mysql-commercial-8.0.18-e17-x86_64

	- The exact version numbers might be different on your machine. However, there should be a 5.7 and 8.0 version, and both must be general availability (GA)
		releases.

7. Remove the symbolic link to/usr/local/mysql, which you created in the practice titled "Installing MySQL." It links to the directory that contains 
	the older version of the MySQL server and is no longer required.

	$ rm / usr/local/mysql

		rm: remove symbolic link '/usr/local/mysql'? y

8. Create a symbolic link from the newly extracted MySQL directory to /usr/local/mysql.

	$ ln -s /opt/mysql-commercial-8* /usr/local/mysql

9. Replace the existing mysqld.service file in the /usr/lib/systemd/system directory with the /labs/service-8.0/mysqld.service file.

	# cp /labs/service-8.0/mysqld.service /usr/lib/systemd/system

10. Execute systemctl daemon-reload to make systemd aware of the new service unit configuration file.

	# systemctl daemon-reload

11. Start the mysqld service to launch the new version of the server.

	$ systemctl start mysqld

12. verify that the mysqid service is running.

	$ systemctl status mysqld

13. Run mysql_upgrade to complete the upgrade process and ensure that there are no incompatibilities between the versions. Is this step required? 

	$ mysql_upgrade -uroot -P

		Enter password: oracle
		
	- This step is not required because MySQL server 8.0.16 or later will perform all of the upgrade process automatically when you start the server.

If you are upgrading to an older release before 8.0.16. you may see the following result:

	$ mysql_upgrade -uroot -p

		Enter password: oracle

		Checking if update is needed.
		Checking server version.
		Running queries to upgrade MySQL server.
		Upgrading system table data.
		Checking system database.
		mysql.columns_priv 	O.K.
		mysql.component		O.K.
		mysql.db			O.K.
		mysql.default_roles	O.K.
		mysql.engine_cost	O.K.
		....

14. Use systemctl to view the full logs during the startup of the MySQL server. Can you find the logs related to the upgrade process?

	$ systemctl status mysqld
	
15. Verify that the new version of MySQL server is now running on your system.

	$ mysqld --version

		/opt/mysql-commercial-8.0.18-e17-x86_64/bin/mysqld Ver 8.0.18- commercial for el? on x86 64 (MySQL Enterprise Server - Commercial)


		
Demo 5 : Deploying MySQL with Docker	---------------------------------

1. Load the MySQL Enterprise Server Docker image into your Docker Engine and verify the image has been loaded successfully.

	$ cd/stage/MySQL-Server/
	$ docker load i mysql-enterprise-server-8.0.18.tar

		4fee40bcfecf: Loading layer 124.2MB/124.2MB
		570b2c36673a: Loading layer 305MB/305MB
		85211a73c61b: Loading layer 8.704kB/8.704kB
		1cf11301afd2: Loading layer 2.048kB/2.048kB
		Loaded image: mysql/enterprise-server: 8.0

	$ docker images

		REPOSITORY				TAG 	IMAGE ID 			CREATED 		SIZE
		mysql/enterprise-server	8.0		216a5e9c5del		4 weeks ago		421MB

	- The image name is mysql/enterprise-server and the tag is 8.0.

2. Start a MySQL Server Docker container with the name mysql1 using the MySQL server image. Check that the container is running.

	$ docker run --name-mysqll -d mysql/enterprise-server:8.0

		0917d09d8ff01b231407be0b37dab218ab0902047e549f3b429a2c83f7e83ac2

	$ docker ps

		CONTAINER ID 	IMAGE							COMMAND					CREATED 						STATUS 		PORTS 				NAMES
		0917d09d8fEO 	mysql/enterprise-server: 8.0	"/entrypoint.sh mysq." 	28 seconds ago	Up 28 seconds	(healthy)	3306/tcp, 33060/tcp	mysql1

3. Retrieve the generated root password for the mysqll container.

	$ docker logs mysqll 2>&1 | grep GENERATED

		[Entrypoint] GENERATED ROOT PASSWORD: SOMALASpuG, EbzOh@qIkJ3xEKm3

4. Execute a mysql command-line client from the mysql1 container to connect to the MySQL server running in the container. Enter the generated password 
	to authenticate the connection.

	# docker exec it mysqll mysql -uroot -p

		Enter password: SOMALASpuG, Ebzoh@qIkJ3zEKm3

	mysql>

5. Change the root user password with an ALTER USER statement and exit the mysql command-line client.

	mysql> ALTER USER USER () IDENTIFIED BY 'MySQL8.0';
	mysql> EXIT

6. Execute a mysql command-line client from the mysql1 container to connect to the MySQL server running in the container. Enter the new password. 
	Then exit the mysql command- client.

	# docker exec -it mysqli mysql -uroot -p

	Enter password: MySQL8.0

	mysql> EXIT
	
7. Stop the MySQL server by stopping the Docker container and verify the status of the container.

	$ docker stop mysql1

		mysql1

	$ docker ps -a

	CONTAINER ID 	IMAGE 							COMMAND  				 CREATED   	 		STATUS						  	PORTS	 	NAMES
	0917d09d8ff0	mysql/enterprise-server: 8.0	"/entrypoint.sh mysq..." About 4 minutes ago Exited (0) About a minute ago 			mysql1

8. Start the MySQL Server Docker container and verify the status of the container.

	$ docker start mysql1
		mysqll

	# docker ps

	CONTAINER ID 	IMAGE 							COMMAND  				CREATED   	 						STATUS	  		PORTS	 		NAMES
	0917d09d8ff0 	mysql/enterprise-server: 8.0 	"/entrypoint.sh mysq..." About 11 minutes ago Up 34 seconds	(healthy) 3306/tcp, 33060/tcp 	mysql1

9. Stop the MySQL Server Docker container.

	$ docker stop mysqll
		mysql1


---========== CHAP.3 : UNDERSTANDING MYSQL ARCHITECTURE ==========================

Architecture   ---------------------------------

	A MySQL installation has the following architectural components:

		The MySQL server process
		Client programs connecting locally or remotely
		Other MySQL programs (that are not clients) installed locally

	Client programs connect to the MySQL server process to make data requests.

MySQL Server Process :

	- Is a program called mysqld
	- Runs as a single process that is multithreaded
	- Manages access to databases on disk and in memory
	- Supports simultaneous client connections
	- Supports multiple storage engines
	- Supports both transactional and non-transactional tables
	- Optimizes memory usage by using caches and buffers

Terminology			--------------------------------------------------------

Host: The physical machine or virtual machine on which the server program runs, which includes the following:
		Its hardware configuration
		The operating system running on the machine
		Its network addresses

MySQL server software: A software program (mysqld) with a version number and a list of features
MySQL server instance: A mysqld server process that manages a data directory containing one or more schemas
	- Multiple instances can run on a single host.

Connection Protocols --------------------------------------------------------

	Protocols are implemented in the client libraries and drivers.
	The speed of a connection protocol varies with the local settings.
	In addition to the legacy MySQL Classic Protocol, the MySQL X Protocol is introduced in MySQL 5.7.12 and enabled by default in MySQL 8.0.

Protocol		Connection		Supports					Operating Systems	

TCP/IP			Local, remote 	Classic and X Protocol		All
Socket file		Local			Classic and X Protocol		UNIX-derived operating systems including Linux, BSD, Max OS X
Shared memory	Local			Classic Protocol			Windows
Named pipes		Local			Classic Protocol			Windows



Local and Remote Connection Protocol: TCP/IP --------------------------------------------------------

• TCP/IP (Transmission Control Protocol/Internet Protocol):

	- Is the suite of connection protocols used to connect hosts on the Internet		
		+ Uses IP addresses or DNS host names to identify hosts
		+ Uses TCP port numbers to identify specific services on each host
		+ MySQL default TCP port number:

			3306 for MySQL Classic protocol (server port option)
			33060 for MySQL X Protocol (server mysqlx port option)
			33062 for administrative connection using MySQL Classic protocol (server admin port option)

    - Enables connections between different hosts

• Example using a host name and the default port (no option specified):

	$ mysql --host=mysqlhost1 --user=root --password

• Example using an IP address and an alternative port (use the -P or --port option):

	$ mysql -h 192.168.1.8 -P 3309 -uroot -p



Local Connection Protocol in Linux: Socket  --------------------------------------------------------

• A form of inter-process communication

	- Used to form one end of a bidirectional communication link between two processes on the same machine

• Requires that the server creates a socket file on the local system with the 'socket' and 'mysqlx_socket' options for MySQL classic and X Protocol, respectively
	- The client specifies the socket file with the option --socket or -s when it connects.
	- This is the best connection type for Linux.

• Example using the /var/lib/mysql/mysql.sock socket file:

	$ mysql -S /var/lib/mysql/mysql.sock -uroot -p

• Example using the default socket file /tmp/mysql.sock:

	$ mysql -uroot -p
	
	- If no host is specified, mysql assumes -h localhost.

------- [ Note sur Socket ] ----------------------------

socket est un fichier socket Unix. Sur une plate-forme de type Unix, le client dispose de deux manières de se connecter au serveur MySQL, 
à savoir la méthode TCP/IP et la méthode du fichier socket. 
Les connexions de fichiers socket Unix sont plus rapides que TCP/IP, mais ne peuvent être utilisées que pour se connecter à un serveur sur le même ordinateur
Le chemin et le nom du fichier socket peuvent être configurés en définissant la variable socket. La valeur par défaut est /tmp/mysql.sock

------- [ Fin Note ] ------------------------------------

MySQL and localhost :

• MySQL assumes the TCP protocol when you specify --host=hostname except when the host name is localhost.
	- If the host name is localhost, MySQL assumes you are connecting using a UNIX socket.

• To connect to the localhost IP address 127.0.0.1 or ::1 (for IPv6):
	- Specify TCP explicitly:

		$ mysql -h localhost --protocol=tcp -uroot -p

	- Specify the localhost IP address explicitly:

		$ mysql -h 127.0.0.1 -uroot -p
		$ mysql -h::1 -uroot -p

Local Connection Protocols in Windows: 

• With Shared memory:

The server creates a named shared memory block. Client processes running on the same host uses the shared memory to communicate with the server.
Shared memory is disabled by default. Example of using the default shared memory base name MYSQL:

	$ mysql --protocol=memory -uroot -p

• With Named pipes:

	In Windows, named pipes work much like UNIX sockets:
		The server creates the named pipe, and the client writes to it and reads from it.

	Named pipes support read/write operations, along with an explicit passive mode for server applications.

	Example: $ mysql --protocol=PIPE -uroot -p    <-----  A vérifier



SSL by Default   --------------------------------------------------------

For TCP/IP connections, the connection layer uses secure, encrypted connections when they are available.

	• MySQL package installers create SSL keys if OpenSSL is installed on the server host.
		- The installer calls the mysql_ssl_rsa_setup utility to create the keys.
		- If you install from a binary archive, call this utility manually.

	• MySQL clients use SSL if keys are available.
		- Keys are in the data directory.
		- Copy client keys to remote clients to enable encrypted remote connections.

	• If SSL is not available, connections are unencrypted.
		- You can configure the server and clients to use SSL mandatorily.

	• SSL is not supported on socket, named pipe, and shared memory connections but only supported in TCP mode


Connection Threads	  --------------------------------------------------------

•	The server creates a connection thread for each active client connection.
	- All statements executed by that client are executed by a single server thread.
	- The server destroys the thread when the client disconnects.

•	The Thread Pool plugin manages connections and server threads separately:
	- Manages client connections with thread groups
	- Each thread group allows only one short-running statement at any point in time.
		Reduces the number of server threads
		A thread group can create additional server threads for long-running statements.

	- Distinguishes between high-priority and low-priority statements based on their transaction membership
		Statements within a running transaction are high priority.
		Long-running transactions are improved.
		
•	X DevAPI supports connection pooling, where the client can maintain a pool of connexions for reuse

Quiz :

Which of the following parameters to the --protocol option works on all operating systems, both locally and remotely?

	a. PIPE
	b. MEMORY
	C. SOCKET
	d. TCP  *


SQL Layer ----------------------

SQL Layer Components

After a connection is established, MySQL processes each query in the SQL layer, which comprises the following components:

	+ Parser: Validates the query''s syntax and semantics and converts it to a standard form
	+ Authorization: Verifies that the connected user is allowed to run the query and has enough permissions on the objects the query refers to
	+ Optimizer: Creates an optimal execution plan for each query. This involves deciding which indexes to use and in which order to process the tables
	+ Query execution: Fulfills the execution plan for each query
	+ Query logging: Logs queries that the server receives or executes


Storage Engines Provided with MySQL		----------------------

• InnoDB:

	- This is the default, built-in storage engine.
	- Use this engine except in specific, rare circumstances.

• Other engines included with MySQL:

	- MyISAM 	 : (often used in legacy systems), used on old systems and fast for pure retrieval
	- MEMORY	 : stores data in memory for fast access 
	- ARCHIVE	 : long term storage with compression but not powerful storage
	- BLACKHOLE  : for relay in replication; only metadata stored for testing for exple
	- MERGE		 : before partitioning
	- CSV		 : to create delimited files
	- FEDERATED  : (disabled by default) . A kind of linked db (it''s a table now)
	- NDBCLUSTER : available in MySQL Cluster distributions

• 3rd party storage engine  


Storage Engines: Function : 

	• Storage engines are server components that act as handlers for different table types.
	• MySQL delegates the task of handling data rows to these storage engines, which:
		- Store the data on disk, memory, or other components on the network
		- Provide indexes and other row optimizations
	• When you create a table, you specify which of the available storage engines manages its data.
	• The table''s storage engine does not usually affect the operation of the SQL layer.
		- In general, the SQL layer parses all valid SQL and the storage layer handles row operations.
		- Exceptions are covered in the next slide.

NB : SQL Layer doesn''t care about the the Storage Engine


Exception : SQL and Storage Layer Interactions

• SQL statements are storage-engine independent, apart from the following:
	+ CREATE TABLE has an ENGINE option that specifies which storage engine to use on a per-table basis.
	+ ALTER TABLE has an ENGINE option that enables the conversion of a table to use a different storage engine.

• Some features are available in only some storage engines. For example:
	+ Only InnoDB and NDB support:
		- Foreign keys
		- Transaction control operations, such as COMMIT and ROLLBACK
		- Table partitioning (starting from MySQL 8.0)
	+ Only InnoDB and MyISAM support full-text indexes and R-tree spatial indexes.
	+ Only MEMORY and NDB support hash indexes. [NDB is very heavy on memory]
	+ Only InnoDB supports Transparent Data Encryption (TDE).

Features Dependent on Storage Engine :

	• Storage medium
		- Disk
		- Memory
		- Networked data nodes
		- Null (BLACKHOLE)

	• Transactional capabilities
		- Multistatement transactions with commit and rollback
		- Isolation levels [using LSN : line sequence Number]

	• Locking
		- Locking granularity beyond table level
		- Multiversion Concurrency Control (MVCC)

	• Table Partitioning
		Becomes engine specific in Mysql
		
	• Backup and recovery
		Complex storage engines, such as InnoDB and NDB, maintain consistency internally to improve performance.
			- Files do not always contain a consistent snapshot of the running database.

		Filesystem (raw) backups are possible with simpler engines.
			- Example: MyISAM has a few consistency features, so the files contain a consistent view of the database.

	• Optimization
		- Some storage engines use indexes, internal caches, buffers, and memory to optimize performance.

	• Referential integrity with foreign keys
	• Full-text search
	• Spatial data


InnoDB Storage Engine  -----------------------------

InnoDB, the default storage engine for MySQL, provides high reliabilit performance, as well as the following primary advantages:

	• Transaction-safe (ACID compliant)
	• MVCC (Multiversioning Concurrency Control)
		- InnoDB row-level locking
		- Oracle-style consistent non-locking reads
	• Table data arranged to optimize primary key-based queries
	• Support for foreign key referential integrity constraints
	• Maximum performance on large data volumes
	• Fast auto-recovery after a crash
	• Buffer pool for caching data and indexes in memory
	• Support for table partitioning
	
MyISAM Storage Engine     ------------------------- [not crash-safe]

	• Is used in many legacy systems
		- Was the default storage engine before MySQL 5.5
	• Is fast and simple, but subject to table corruption if server crashes
		- Use REPAIR TABLE to recover corrupted MyISAM tables.
	• Supports FULLTEXT indexes
	• Supports spatial data types and indexes
	• Supports table-level locking													<---- Can slow things up
	• Supports raw table-level backup and recovery because of the simple file format
	• No transactional support														<---- inconsistency
	• No support for table partitioning in MySQL 8.0 as compared to MySQL 5.7.      <---- We could partition on MySQL 5.7


MEMORY Storage Engine      -------------------------

	• Stores row data and indexes in memory
		- Data does not survive server restarts.
	• Stores rows with a fixed-length format
	• Support binary trees and hash indexes
	• Limits table size with the --max-heap-table-size option
		- The option is named for the older storage engine name HEAP.
	• Supports table-level locking
	• Cannot store TEXT or BLOB columns


ARCHIVE Storage Engine     -------------------------

The ARCHIVE storage engine is used for storing large volumes of data in a compressed format, allowing for a very small footprint. It has 
these primary characteristics:

	• Does not support indexes
	• Supports INSERT and SELECT, but not DELETE, REPLACE, or UPDATE
	• Supports ORDER BY operations and BLOB columns
	• Accepts all data types except spatial data types
	• Uses row-level locking
	• Supports AUTO INCREMENT columns
	• Disabled by default, need to be enabled to use


NDBCluster Storage Engine     -------------------------

The NDBCluster storage engine (also known as NDB) enables running several computers with MySQL servers, data nodes, and management servers in a cluster. 
It offers these primary characteristics:

	• Only available with MySQL Cluster
	• Supports a "cluster" (group of nodes working together to store/retrieve data)
	• Runs outside of the MySQL server as one or more processes
	• MySQL server provides SQL interface to the cluster processes.
	• Supports transactions and foreign keys
	• Provides high availability, scalability, and high pelormance

BLACKHOLE Storage Engine      -------------------------

	Acts as a null storage engine
		- It accepts data but does not store it.
		- Retrievals always return an empty result.
	• Supports all kinds of indexes
	• Is useful in some specific cases:
		- Replication: Relay slaves that log and forward replicated logs but do not store the data.
			- Committed transactions are written to the binary log, but rolled-back transactions are not.
		- Verifying backups and dump file syntax
		- Finding performance bottlenecks not related to the storage engine
			- Example: Measuring the overhead from binary logging


Storage Engines Feature Summary      -------------------------

	Feature 			InnoDB	MyISAM	Memory	Archive	NDBCluster	
	B-tree indexes		Yes		Yes		Yes		No		No
	Backup/point-in-time Yes	Yes		Yes		Yes		Yes
	recovery [1]
	Cluster database 	No		No		No		No		Yes	
	support
	Clustered indexes	Yes		No		No		No		No
	Compressed data		Yes		Yes[2]	No		Yes		No
	Data caches			Yes		No		N/A		No		Yes
	Transparent Data 	Yes		No		No		No		No
	Encryption
	Foreign key 		Yes		No		No		No		Yes [3]
	support
	Full-text search 	Yes [4]	Yes		No		No		No
	indexes
	Geospatial data type Yes	Yes		No		Yes		Yes
	support
	Geospatial indexing  Yes[5] Yes		No		No		No
	support (R-tree)
	Table Partitioning [6]Yes	No		No		No		Yes
	Hash indexes		No [7]		No		Yes		No		Yes
	Index caches		Yes		Yes		No		No		Yes
	Locking granularity	Row		Table	Table	Row		Row
	Multiversion 		Yes		No		No		No		No
	Concurrency Control (MVCC)
	Replication 		Yes		Yes		Limited [8]	Yes		Yes
	support [1]
	Storage limits		64TB per 256TB per 	RAM		None	384EB
						tablespace	table
	T-tree indexes		No		No		No		No		Yes
	Transactions		Yes		No		No		No		Yes
	Update statistics 	Yes		Yes		Yes		Yes		Yes
	for data dictionary



-------------------------	How MySQL Uses Disk Space	-------------------------

	• Data Directory

		+ Server Log Files 
		+ mysql.ibd
		+ Status Files
		+ SSL Certificates (.pem)
		+ InnoDB Log Files
		+ InnoDB System Tablespace
		+ InnoDB Undo Tablespaces

	• Database Directory (per database)
		
		+ Storage Engine Data Files
			(.ibd, .CSV, .ARZ,	.MYD, .MYI, .MRG)

		+ Serialized Dictionary Information (.sdi)
			for non-InnoDB tables  [no more frm files]


	• Executable Files

		+ Server
		+ Server helper
		+ Client
		+ Utility

	• Log Files

		+ Error
		+ General
		+ Binary log
		+ Slow query
		+ Audit

	• Configuration/Runtime

		+ .cnf
		+ Localized error messages
		+ PID
		+ Socket
		

-------------------------	How MySQL stores Metadata	-------------------------

What Is a Data Dictionary?

	• Metadata is information about the data stored in an RDBMS, such as:

		- Table and column definitions
		- Index and constraint definitions
		- User and privileges information


	• The data dictionary is a centralized repository of metadata for all the data in an RDBMS.

Types od metadata :

	Table Definitions
	SP Definitions
	ACL
	View Definitions
	Schemas


Data Dictionary in Earlier Versions of MySQL  	-------------------------

	Data Dictionary location :

		Filesystem : .frm  .trg  .opt
		In MyISAM  : some data dict in 'mysql' schema system tables (user, events, proc )
		InnoDB : in InnoDB System Tables

Transactional Data Dictionary: Features    	-------------------------

	• Single metadata repository for all MySQL server subsystems
		- All storage engines have their own user tables, but all their metadata are stored in the same data dictionary tables.
		- The tables reside in the InnoDB Data Dictionary tablespace.

	Based on standard SQL definitions
		- Easier to extend: Common Data Dictionary API
		- Automatic upgrades by using the installer

	• Uses the transactional storage engine, InnoDB
		- Atomic DDL
		- Crash-safe

	• Improves INFORMATION SCHEMA
		- Better performance using standard optimization techniques
		- Easier to maintain


Serialization of the Data Dictionary    	-------------------------

	Every time there is a change to the metadata, MySQL creates a copy of it:
		• The metadata is serialized in JSON format.
		• Known as SDI (Serialized Dictionary Information)

	MySQL stores the copy:

		• InnoDB: In the InnoDB user tablespaces, along with the data
		• MyISAM: As an . sdi file in the database directory


Dictionary Object Cache :

	• Is a shared global cache that stores previously accessed data dictionary objects in memory to enable object reuse and minimize disk I/O
	• Uses an LRU-based eviction strategy to evict least recently used objects from memory
	• Comprises cache partitions that store different object types

InnoDB Tablespaces :

	InnoDB tablespaces are data files that can store one or more InnoDB tables and associated indexes. 
	InnoDB uses the following types of tablespaces:

		• Data tablespaces
			System tablespace
			File-per-table tablespaces
			General tablespaces [to group tablespaces together]
		• Undo tablespaces
		• Temporary table tablespaces


InnoDB System Tablespace

	• InnoDB stores the change buffer and doublewrite buffer in the system tablespace. It may also contain table and index data.
	• The 'innodb_data_file_path' option configures the size and physical location of the InnoDB system tablespace files on disk.

		- Default value: ibdatal:12M:autoextend
			- One file called ibdata1, 12 MB in size, autoextending
		- Example value: ibdata1:20M;/ext/ibdata2:10M:autoextend
			- Two files:
				ibdatal in the data directory, fixed at 20 MB in size 
				ibdata2 in the /ext directory, 10 MB in size, auto-extending
		- If you have a set of files in the system tablespace, only the last file in the set can be auto-extending. The file can grow but 
		does not shrink.

	• The 'innodb_file_per_table' option specifies whether MySQL stores new table data and indexes in the system tablespace or in a separate ibd file.


File-per-Table Tablespaces : 

	• Are enabled by default
	• Contain data and indexes from a single table, including its metadata
		. ibd files named for the table in the database directory

	• Example:
		
		CREATE TABLE fpt table (a INT PRIMARY KEY, b CHAR(4))

		--> Creates the fpt_table.ibd file in the current database''s directory

		Example using an explicit TABLESPACE clause:

			CREATE TABLE fpt table (a INT PRIMARY KEY, b CHAR(4)) TABLESPACE=innodb_file_per_table;

		--> Creates a file-per-table tablespace even if innodb_file_per_table is OFF


General Tablespaces : 

	• Contain data and indexes from multiple tables
		. ibd files named when you create the tablespace
		Do not belong to any particular database.

	• Example:

		CREATE TABLESPACE myts ADD DATAFILE 'myts datal.ibd';

			--> Creates the myts datal. ibd file in the data directory

	• Place new tables in a general tablespace by specifying a TABLESPACE clause:

		CREATE TABLE gen_table(a INT PRIMARY KEY, b CHAR(4)) TABLESPACE=myts;

	• Move a table to a general tablespace with ALTER TABLE:

		ALTER TABLE fpt table TABLESPACE=myts;

	NB : You can create only 1 datafile per tablespace 


Choosing Between File-Per-Table and General Tablespaces  -----------------------

	• Per-table tablespaces provide the following benefits:

		Table compression: You cannot mix compressed and uncompressed tables within the same general or system tablespace.
		Space reclamation (with TRUNCATE): InnoDB drops and re-creates truncated file-per- table tablespaces, releasing free space back to the filesystem.

	• General tablespaces provide the following benefits:
		Less filesystem overhead for statements that remove large amounts of data
			- Such as DROP TABLE or TRUNCATE TABLE
		Consume less memory to store tablespace metadata

	• You can mix tablespace types within a database
		- Some tables using file-per-table
		- Some tables using general tablespaces
		- Multiple general tablespaces


Locating Tablespaces Outside the Data Directory   -----------------------

• Place tablespaces outside the data directory to:
	- Physically separate datasets from other data
	- Place some data on faster devices than general data

• Use the DATA DIRECTORY clause when you create a table:

	CREATE TABLE ext table (a INT PRIMARY KEY, b CHAR(4)) DATA DIRECTORY='/datadir2';

• Use a relative or absolute path when you specify the data file for a general tablespace
	- Relative paths use the data directory as their root.
	- Absolute paths can refer to any valid filesystem target.

		CREATE TABLESPACE ext ts ADD DATAFILE '/datadir2/ext ts datal.ibd';					<---- Must end with .ibd extension

• The directory must be specified in the read only variable innodb directories.
	The directories specified in innodb_directories are also used for tablespace discover during crash recovery


Temporary Tablespaces	   -----------------------

	InnoDB has two types of temporary tablespaces:

	• Session Temporary Tablespaces: Store user-created temporary tables and internal temporary tables created by the optimizer:
		- Allocated to a session from a pool of temporary tablespaces on the first request to create an on-disk temporary table
		- A pool of ten temporary tablespaces is created when the server is started. The size of the pool never shrinks, and tablespaces are added 
			to the pool automatically as necessary.

	• Global Temporary Tablespace: Stores rollback segments (undo logs) for changes made to user-created temporary tables:
		- The relative path, name, size, and attributes for temporary tablespace files depend on the value of innodb_temp_data_file_path.
		- If no value set, all temporary files are created in a 12 MB auto-extending data file called ibtmp1 in the 'innodb_data_home_dir' directory.


--------------    Redo Logs 	   -----------------------

	• Store InnoDB change operations before they are made to the data files
		- Enables InnoDB to optimize data writes so that they do not need to occur synchronously
		
	• Are used during crash recovery
		- InnoDB replays operations in the redo log files to ensure transactional consistency across all tables, even for operations 
			that did not write to the data files before the crash.
			
	• The number of files and file size are controlled by the innodb_log_files_in_group and innodb_log_file_size options, respectively.

	• Are located in the data directory by default
		- Typically, the files are named ib logfile0 and ib logfilel
		
	• Are located in the data directory by default
		- Typically, the files are named ib_logfile and ib_logfilel
			- If the files have wrong size or corrupted, InnoDB fails to start.
			- If the files do not exist, they are created during the server startup.
		- Controlled by the innodb_log_group_home_dir option


--------------    Undo Logs 	   -----------------------

• Store copies of unmodified data that becomes modified by transactions so that InnoDB can access an earlier version of the data
• Are also called rollback segments				<--- Now they are outside common data file par default
• Are stored by default in the undo tablespace

• Are used for MVCC and rollback
	- InnoDB retrieves the unmodified data from the undo log:
		- If you roll back a transaction						<--- can't rollback committed transactions
		- If another transaction needs to see earlier data as part of a consistent read
		
• Internally split into:
	- Insert undo buffer
	- Update undo buffer

--------------    Undo Tablespaces	   -----------------------

• By default, undo logs reside in two undo tablespaces.
	- Having two undo tablespaces reduces the maximum size of each.
	- They reside in the MySQL data directory by default.
		- Change their location by setting the innodb undo directory option.

• Undo logs have different I/O patterns than standard data.
	- These patterns make them well suited to storing on SSD.

• Set the innodb_rollback_segments option to change the number of rollback segments allocated to each undo tablespace.
	- The default value of 128 is the maximum number allowed.
	

Temporary Table Undo Log	   -----------------------

• The undo logs for temporary tables are handled differently from other tables.

• Temporary tables do not require redo logs.
	- After a crash, InnoDB does not need to rebuild any temporary tables.

• The undo logs for temporary tables are stored in the rollback segments of the global temporary tablespace file (ibtmp1).


-----------------------		Quiz	-----------------------

Which of the following cannot be a target for storing a table when you execute a CREATE TABLE TABLESPACE statement? ...

	a. File-per-table tablespace
	b. General tablespace
	c. System tablespace
	d. Undo tablespace	*




-----------------------		How MySQL Uses Memory	-----------------------

• The MySQL server allocates memory in three different categories:

	Server/Shared
		• Thread cache
		• Host cache
		• Temporary table

	Storage Engine/ Shared
		• Buffer pool
		• Log buffer

	Connection/ Session
		• Sort buffer
		• Join buffer

• Global

	- Allocated when the server starts
	- Shared by the server process and its threads
	- Allocated by and for different components:
		- MySQL maintains its own instance memory.
		- InnoDB and NDB maintain internal memory stores.

• Session

	- Allocated for each thread
	- Dynamically allocated and deallocated
	- Used for handling query results
	- Buffer sizes are usually per session
		- For example: sort_buffer_size, read_buffer_size, and binlog_cache_size

	- TempTable has a shared global limit for all sessions (temptable max ram).
	

Global Memory : 

	• Allocated per MySQL server instance
	• Allocated once when the server starts and freed when the server shuts down
		- This memory is shared across all sessions.
	• When all the physical memory has been used up, the operating system starts swapping.
		- This has an adverse effect on MySQL server performance and can cause the server to crash.
	• Specific buffers and caches include:
		- Grant table buffers for authorization
		- Storage engine buffers such as InnoDB's log buffer (innodb_log_buffer_size) and MyISAM's key cache (key_buffer_size)
		- Table open caches that hold descriptors for open tables (table_open_cache)



Session Memory

	• Dynamically allocated per session
		- Per client connection or thread

	• Freed when the session ends or is no longer needed
	• Mostly used for handling query results
		- Some memory is dedicated to managing the connection buffer and thread stack.
		- Internal temporary tables use the TempTable (default) or MEMORY engine.
		- Most connection memory is used by its result buffer while executing statements.

	• The sizes of the buffers used are per connection.
		- Example: A sort_buffer_size of 1 MB with 100 connections means that there could be a total of 100 MB used for all sort buffers 
		simultaneously.
		- Some buffers can be allocated multiple instances per connection, for example, the join buffer and temporary table.


-----------------------		Log Files and Buffers	-----------------------


Memory													Disk

Log  -->	Buffer	Writes to disk FLUSH on COMMIT -->  - Transaction records
														- Redo log records
														---------------------
														  Redo log

Buffer Pool --> Writes to disk at checkpoints	   --> - Internal data dictionary
													   - Insert undo logs
													   - Update undo logs
													     ------------------------
														  Undo log


Configuring the Buffer Pool		----------------------------------------------

	• Assign as much RAM as you can to the buffer pool to avoid disk I/O on hot data
		- Set the value of innodb_buffer_pool_size so that it uses 70–80% of memory.
		- On a host that is dedicated to using MySQL:
			- Calculate the RAM used by the operating system and occasional administrative programs such as backups that minimize paging
			- Assign 50-80% of the remaining memory to the buffer pool depending on the session memory requirements
			- Example: On a 16 GB Linux system dedicated to MySQL, assign approximately 12 GB to the buffer pool.

	• Enable multiple buffer pools to minimize mutex contention
		- InnoDB automatically configures eight buffer pool instances when your total buffer pool size is larger than 1 GB.
		- Set innodb buffer pool instances so that each instance uses at least 1 GB.



MySQL Plugin Interface		--------------------------------

	• Daemon plugins are run by the server.
	• The plugin API allows loading and unloading of server components.
		- Supports dynamic loading, without restarting server

	• Example plugins:

		- Japanese MeCab full-text parser
		- PAM Authentication
		- Thread Pool plugin
		- Rewriter plugin
		- Third-party storage engines

	• MySQL supports both client and server plugins.


MySQL Component Interface		--------------------------------

	• Both components and plugins can dynamically extend the functionality of MySQL server.
	• MySQL component interface is introduced to overcome some of the architectural constraints of the plugin interface.
		- Components are self-contained code containers that interact with other code exclusively by implementing and consuming services via the registry.
		- Each component can communicate with other components only through services.

	• Example components:
		- Error log components
		- Password Validation component
		- Audit Message component



------------------	[ Demo 3-1: Configuring tablespaces ] --------------------------------

1. Open two Linux terminal windows. This practice refers to these terminal windows as t1 and t2.

2. In 1, view the contents of the data directory.

	Enter the following command at the t1 Linux terminal :

	$ ls /var/lib/mysql

	auto.cnf  	ibdatal		performance_schema	binlog.000001	ib_logfile0 private_key.pen 	binlog.000002	ib_logfilel	public_key.pen binlog.index
	ibtmpl	server-cert.pem	ca-key.pem	#innodb_temp	server-key.pen	ca.pem	mysql	sys client-cert.pen	mysql.ibd	undo_001	client-key.pem
	mysql.sock undo_002	edvmr1p0.pid	mysql.sock.lock	ib buffer pool	mysql upgrade	info

Note the following points:

	There are three database directories: mysql, performance_schema, and sys.
	The system tablespace is contained within the Ibdatal file.
	The global temporary tablespace is contained within the ibtmpl file.
	The session temporary tablespaces are contained in the #innodb_temp directory.
	The InnoDB redo logs are in the ib_logfile0 and ib_logfilel files.
	The PID file (shown as edvmr1p0.pid in the preceding output) has a default name that includes your host''s name.


3. In t2, launch the mysql client.

	Enter the following command at the t2 Linux terminal prompt :
	
	$ mysql -uroot -p

	Enter password: oracle

	mysql>
	
4. In t2, create a new database called ts_test.

	mysql> CREATE DATABASE ts_test; 

5. In t2, create a table called tablel in the new database, with a single integer column called a.

		mysql> USE ts_test

		mysql> CREATE TABLE tablel (a INT);

6. In t2, execute a SHOW CREATE TABLE statement to view the full statement that creates the table.

	mysql> SHOW CREATE TABLE tablel\G

			.........

			1. row

			Table: table1

			Create Table: CREATE TABLE `table1 (
			`a` int (11) DEFAULT NULL
			) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
			COLLATE utf8mb4_0900_ai_ci

   NB : The table uses the InnoDB storage engine, and there are no TABLESPACE table options.

7. In t1, view the contents of the data directory again.

	$ ls /var/lib/mysql			
		....
		ts_test

	- There is a new directory containing the new ts_test database.
	
8. In t1, view the contents of the ts_test database directory.

	$ ls /var/lib/mysql/ts_test

		tablel.ibd

	- The database directory contains a tablespace file for the tablel table.

9. In t2, create a tablespace called general with the data file general.ibd.

		mysql> CREATE TABLESPACE general ADD DATAFILE 'general.ibd'; 

10. In t2, create a table in the new tablespace called table2 with a single integer column called b.

		mysql> CREATE TABLE table2 (b int) TABLESPACE=general; 

11. In t2, execute a SHOW CREATE TABLE statement to view the full statement that creates the table2 table.

		mysql> SHOW CREATE TABLE table2\G

			Table: table2

			Create Table: CREATE TABLE `table2 (
			`b` int (11) DEFAULT NULL
			) /* 150100 TABLESPACE `general` */ ENGINE=InnoDB
			DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_0900_ai_ci
			
			The table definition contains a TABLESPACE table option that refers to the general tablespace.	
				
	
12. In t1, view the contents of the data directory and the ts_test database directory again.

		$ ls /var/lib/mysql
			...
			general.ibd

		#ls /var/lib/mysql/ts_test

			tablel.ibd

	- The data directory contains a new .ibd tablespace file for the general tablespace.
	- The ts_test database directory contains no tablespace file for the new table.

13. In t1, create a new directory in the root of the filesystem called /tablespaces and grant its ownership to the mysql user and group.

		# mkdir /tablespaces
		# chown mysql:mysql/tablespaces

14. In t1, add the new/tablespaces directory to the innodb_tablespaces option in the /etc/my.cnf file and restart the MySQL server.

		Edit the /etc/my.cnf file and add the line shown in bold near the top.

		[mysqld]
		innodb_directories="/tablespaces"
		datadir=/var/lib/mysql
		socket=/var/lib/mysql/mysql.sock
		user=mysql
		#Disabling symbolic-links is recommended to prevent assorted security risks
		symbolic-links=0	
		
		[mysqld safe]
		log-error=/var/log/mysqld.log
		pid-file=/var/run/mysqld/mysqld.pid

		[client]
		socket=/var/lib/mysql/mysql.sock
		
		EOF
		
		Enter the following command at the t1 Linux terminal prompt:

		$ systemctl restart mysqld
	
15. In t2, create a new general tablespace called external with a data file called external. ibd in the tablespaces directory.

		mysql> CREATE TABLESPACE external ADD DATAFILE '/tablespaces/external.ibd';

			ERROR 2006 (HY000): MySQL server has gone away
			....
		
		- When you restart a running MySQL server, the mysql client loses its connection and must reconnect before executing a statement.

Note: If MySQL does not have permissions to write to the /tablespaces directory, or if it is prevented from doing so by a mandatory access control system 
such as SELinux, the preceding command fails.

16. In t2, create a table in the new external tablespace called table3 with a single integer column called c.

		mysql> CREATE TABLE table3 (c int)

		TABLESPACE external;


17. In t1, view the contents of the data directory and the ts_test database directory again. 
	
	#ls/var/lib/mysql

		ts_test

	$ ls /var/lib/mysql/ts_test
	
	tablel.ibd

	- There are no visible artefacts that refer to table3 in the data and database directories.
	
18. In 11, view the contents of the/tablespaces directory.

		#ls /tablespaces/

		external.ibd

	- There is a data file for the new tablespace.

19. In t2, create a table in its own default tablespace in the tablespaces directory called table4 with a single integer column called d.

		mysql> CREATE TABLE table4 (d INT)

		-> DATA DIRECTORY='/tablespaces';


20. In t1, view the contents of the data directory, the ts_test database directory, and the /tablespaces directory again.

	$ls /var/lib/mysql

	  ...	ts_test

	$ls /var/lib/mysql/ts_test	

		tablel.ibd

	$ ls /tablespaces/

		external.ibd ts test

	Note the following points:
	
	- There are no changes in the data or database directories.
	- The /tablespaces directory contains a new ts_test directory.

21. In t1, view the contents of the new /tablespaces/ts_test directory.

	$ls /tablespaces/ts_test/

		table4.ibd

	- The directory contains the file-per-table tablespace for the table 4 table.

22. In t2, create a table called table5 in the system tablespace, with an integer column called e.

	mysql> CREATE TABLE table5 (e int) TABLESPACE=innodb_system;


23. In t1, view the contents of the data directory, the ts test database directory, and the /tablespaces/ts test directory again.

	$ls /var/lib/mysql

		ts_test

	$ls /var/lib/mysql/ts_test/	

		table4.ind

	There are no new tablespace files created. The tables table is in the InnoDB system tablespace.

24. In t2, drop the ts_test database.

		mysql> DROP DATABASE ts_test; 
		
		Query OK, 5 rows affected (d. sec)

	- DROP DATABASE returns the number of tables that were removed. The output shows 5 tables were removed.


25. In t1, view the changes in the filesystem.

	# ls /var/lib/mysql   --> ts_test has gone here

	# ls /tablespaces/

		external.ibd ts_test

	# ls /tablespaces/ts_test/

	- The ts_test database directory in the data directory no longer exists.
	- The /tablespaces directory contains an empty ts_test directory.

26. In t2, drop the general and external tablespaces.

	mysql> DROP TABLESPACE general;

		Query OK, 0 rows affected (sec)

	mysql> DROP TABLESPACE external;

		Query OK, 0 rows affected (4.44 sec)
	
27. In t1, view the changes in the filesystem.

	# ls /var/lib/mysql   	--> general.ibd has gone here

	# ls /tablespaces/

		 ts_test			--> external.ibd has gone here

28. In t1, delete the /tablespaces/ts_test and/tablespaces directories.

	$ rmdir /tablespaces/ts_test/
	$ rmdir /tablespaces/	
	

------------------	[ Demo 3-2: Configuring the Buffer Pool ] --------------------------------

1. In t1, run the free command to see how much free memory is available on your system.

	$ free

	- Linux uses available memory to improve the performance of I/O operations with write buffers and read caches.
	- In the preceding output, the machine has 16 GB of RAM of which approximately 7.5 GB memory is being used and 8.5 GB is free. 
	  Your machine will show different numbers.

2. In t2, run a SHOW VARIABLES LIKE command to view the current size of the InnoDB buffer pool in bytes.

		mysql> SHOW VARIABLES LIKE 'innodb_buffer_pool_size';

	The default size of the InnoDB buffer pool is 128 MB.
	
3. In t2, change the size of the InnoDB buffer pool to a value that is approximately 75% of your system''s RAM, in bytes.

	mysql> SET GLOBAL innodb_buffer_pool_size=12000 * 1024 1024;	
	
	- 75% of the RAM shown in step 1 (16 GB) is approximately 12 GB (12,000 MB.)

	Note: If the new buffer pool size is not a multiple of 128 MB (the value of innodb_buffer_pool_chunk_size), the operation rounds up to the next multiple 
	of 128 MB and produces a warning.

4. In t2, view the changed size of the InnoDB buffer pool.

	mysql> SHOW VARIABLES LIKE 'innodb_buffer_pool_size';

5. In t2, view the number of buffer pool instances.

	mysql> SHOW VARIABLES LIKE 'innodb_buffer_pool_instances';

	The innodb buffer_pool_instances variable is not a dynamic variable, so you cannot change it on a running system.

6. In t1 edit the [mysqld] option group in the/etc/my.cnf file and set the following option values:

	- Set the buffer pool size to a round number of GB that is less than or equal to 75% of your system''s RAM (example: 12 GB).
	- Set the number of buffer pool instances so that you have one instance per GB in your buffer pool (example: 12).
	- 
	Save and close the file before performing the following step.
	Edit the/etc/my.cnf file and add the following highlighted lines near the top of the file.

		[mysqld]
		innodb_buffer_pool_size=12G
		innodb_buffer_pool_instances=12
		datadir /var/lib/mysql
		socket=/var/lib/mysql/mysql.sock
		...	
		
7. In t1, restart the MySQL service.

	$ systemctl restart mysqld

8. In t2, view the InnoDB buffer size and the number of buffer pool instances again.

	mysql> SHOW VARIABLES LIKE ''innodb_buffer_pool_size

	ERROR 2006 (HY000): MySQL server has gone away

	mysql> SHOW VARIABLES LIKE 'innodb_buffer_pool_instances';

	The InnoDB buffer pool options that you placed in the configuration file have been applied.

9. Exit all mysql client sessions and close all Linux terminal windows.

	mysql> EXIT


